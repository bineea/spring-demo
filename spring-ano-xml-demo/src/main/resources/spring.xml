<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    ">

    <!--只能在一类文件里加载一个 properties文件，加载多个会导致冲突-->
    <context:property-placeholder location="classpath:database.properties"/>

<!--    &lt;!&ndash; spring的属性加载器，加载所有properties文件中的属性，供所有springcontext-*.xml文件共同使用 &ndash;&gt;-->
<!--    <bean id="configPropertyConfigurer"-->
<!--          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
<!--        <property name="locations">-->
<!--            <list>-->
<!--                &lt;!&ndash;这样写可以引入多个properties文件&ndash;&gt;-->
<!--                &lt;!&ndash; <value>/WEB-INF/configInfo.properties</value> &ndash;&gt;-->
<!--                <value>classpath:database.properties</value>-->
<!--            </list>-->
<!--        </property>-->
<!--    </bean>-->

    <!--配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${database.drive}" />
        <property name="url" value="${database.url}" />
        <property name="username" value="${database.username}" />
        <property name="password" value="${database.password}" />
    </bean>

    <!--mybatis配置sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
    </bean>

    <!--mybatis配置sampleTransferMapper对象-->
    <bean id="sampleTransferMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="my.demo.dao.mapper.SampleTransferMapper"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>

    <!--实例化bean的方式-->
    <!--无参构造-->
    <bean id="transferService" class="my.demo.service.TransferServiceImpl">
        <property name="sampleTransferMapper" ref="sampleTransferMapper" />
    </bean>
    <!--有参构造-->
    <bean id="transferManager" class="my.demo.manager.TransferManagerImpl">
        <constructor-arg name="transferService" ref="transferService" />
    </bean>
    <!--静态方法-->
    <bean id="helloworldManagerByStatic" class="my.demo.manager.HelloworldManagerFactory"
          factory-method="initHelloworldManagerImpl">
    </bean>
    <!--实例方法-->
    <bean id="createHelloworldManager" class="my.demo.manager.CreateHelloworldManager">
    </bean>
    <bean id="helloworldManagerByExample" factory-bean="createHelloworldManager" factory-method="getHelloworldManagerImplInstance">
    </bean>

    <!--开启AOP配置-->
    <aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true" />

    <bean id="helloworldServiceImpl" class="my.demo.manager.HelloworldManagerImpl">
    </bean>

    <!--配置AOP-->
    <bean id="logAspecj" class="my.demo.aspectj.LogAspectj">
    </bean>

    <aop:config>
        <aop:aspect ref="logAspecj">
            <aop:pointcut id="helloworldPointcut" expression="execution(* my.demo.manager.HelloworldManagerImpl.*(..))" />
            <aop:before method="beforeExcute" pointcut-ref="helloworldPointcut" />
            <aop:after method="afterExcute" pointcut-ref="helloworldPointcut" />
            <aop:around method="aroundExcute" pointcut-ref="helloworldPointcut" />
        </aop:aspect>
    </aop:config>

</beans>