<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    ">

    <!--扫描-->
    <context:component-scan base-package="my.demo.*" />

    <!--只能在一类文件里加载一个 properties文件，加载多个会导致冲突-->
    <context:property-placeholder location="classpath:database.properties"/>

<!--    &lt;!&ndash; spring的属性加载器，加载所有properties文件中的属性，供所有springcontext-*.xml文件共同使用 &ndash;&gt;-->
<!--    <bean id="configPropertyConfigurer"-->
<!--          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
<!--        &lt;!&ndash;是否忽略不可解析的Placeholder，如果配置多个PropertyPlaceholderConfigurer，则必须设置为true&ndash;&gt;-->
<!--        <property name="ignoreUnresolvablePlaceholders" value="true" />-->
<!--        <property name="locations">-->
<!--            <list>-->
<!--                &lt;!&ndash;这样写可以引入多个properties文件&ndash;&gt;-->
<!--                &lt;!&ndash; <value>/WEB-INF/configInfo.properties</value> &ndash;&gt;-->
<!--                <value>classpath:database.properties</value>-->
<!--            </list>-->
<!--        </property>-->
<!--    </bean>-->

    <!--配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${database.drive}" />
        <property name="url" value="${database.url}" />
        <property name="username" value="${database.username}" />
        <property name="password" value="${database.password}" />
    </bean>

    <!--mybatis配置sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
    </bean>

    <!--mybatis配置sampleTransferMapper对象-->
    <bean id="sampleTransferMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="my.demo.dao.mapper.SampleTransferMapper"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>


    <!--开启AOP配置-->
    <aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true" />

    <!--开启事务配置-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--注解驱动：解析@Transactional注解，对@Transactional注解的方法用指定的事务管理器实现事务管理  -->
    <tx:annotation-driven transaction-manager="transactionManager" />

</beans>